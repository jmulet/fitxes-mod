/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportarFotos.java
 *
 * Created on 18-jun-2011, 12:27:41
 */

package org.iesapp.modules.fitxes.dialogs.admin;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import jxl.Cell;
import jxl.CellType;
import jxl.DateCell;
import jxl.LabelCell;
import jxl.NumberCell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.read.biff.BiffException;
import org.iesapp.clients.iesdigital.alumnat.GeneratePwds;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.HtmlLog;
import org.iesapp.modules.fitxescore.util.Cfg;
import org.iesapp.util.DataCtrl;
/**
 *
 * @author Josep
 */
public class ImportarAlumnes extends javax.swing.JDialog {
    private final DefaultListModel listModel1;
    private String path=null;
    private String directory;
    private int currentExp=0;
    private final Timer timer;
    private final int AnimationRate=1000;
    private LongTask task;
    private final int anyacademic;
    private String log;
    private final Cfg cfg;

    /** Creates new form ImportarFotos */
    /**
     * 
     * @param par
     * @param modal
     * @param any 
     */
    public ImportarAlumnes(java.awt.Frame par, boolean modal, int any, Cfg cfg) {
        super(par, modal);
        this.cfg = cfg;
        initComponents();
        listModel1 = new DefaultListModel();
        jList1.setModel(listModel1);
        anyacademic = any;

         timer = new javax.swing.Timer(AnimationRate, new
                ActionListener() {
                         public void actionPerformed(ActionEvent e) {
                                 if(task!=null && task.isAlive())
                                 {
                                    jButton3.setEnabled(false);
                                    jButton4.setEnabled(false);
                                 }
                                 else
                                 {
                                    jButton3.setEnabled(true);
                                    jButton4.setEnabled(true);
                                    jProgressBar1.setIndeterminate(false);
                                    timer.stop();
                                 }
                         }
         });
         
       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        htmlLog1 = new org.iesapp.framework.util.HtmlLog();
        jTaskPaneGroup1 = new com.l2fprod.common.swing.JTaskPaneGroup();
        jUpdate = new javax.swing.JCheckBox();
        jContrasenyes = new javax.swing.JCheckBox();
        jGenFitxes = new javax.swing.JCheckBox();
        jAssigna = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Importació d'alumnes");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Origen de dades:  Fitxers .xls generats per XESTIB2.0");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Afegeix");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Treu");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Importa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Tanca");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(htmlLog1);

        jTaskPaneGroup1.setTitle("Opcions");
        com.l2fprod.common.swing.PercentLayout percentLayout1 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout1.setGap(2);
        percentLayout1.setOrientation(1);
        jTaskPaneGroup1.getContentPane().setLayout(percentLayout1);

        jUpdate.setText("Fes un update si l'alumne ja existeix en el curs actual");
        jUpdate.setOpaque(false);
        jTaskPaneGroup1.getContentPane().add(jUpdate);

        jContrasenyes.setSelected(true);
        jContrasenyes.setText("Genera les contrasenyes");
        jContrasenyes.setOpaque(false);
        jTaskPaneGroup1.getContentPane().add(jContrasenyes);

        jGenFitxes.setSelected(true);
        jGenFitxes.setText("Genera les fitxes");
        jGenFitxes.setOpaque(false);
        jTaskPaneGroup1.getContentPane().add(jGenFitxes);

        jAssigna.setSelected(true);
        jAssigna.setText("Assigna automàticament tutors");
        jAssigna.setOpaque(false);
        jTaskPaneGroup1.getContentPane().add(jAssigna);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .addComponent(jTaskPaneGroup1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTaskPaneGroup1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Add new File to the List
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
             "Fitxers Excel", "xls");

        chooser.setMultiSelectionEnabled(true);
        chooser.setFileFilter(filter);
        if(directory==null) {
            directory = ".";
        }

        chooser.setCurrentDirectory(new File(directory));
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
        
        File[] selectedFiles = chooser.getSelectedFiles();
        for(int i=0; i<selectedFiles.length; i++)
        {
            listModel1.addElement(selectedFiles[i].getPath());
            directory = selectedFiles[i].getAbsolutePath();
        }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    //Esborra el selected file
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int id = jList1.getSelectedIndex();
        if(id>=0) {
            listModel1.remove(id);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    //Importa
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        htmlLog1.clear();
        timer.start();
        task = new LongTask();
        task.start();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(task!=null && task.isAlive())
        {
                task.interrupt();
                timer.stop();
        }
        this.dispose();
    }//GEN-LAST:event_formWindowClosing


    class LongTask extends Thread
    {
        public double inc;
        public double status;
        private int numChecked=0;
        private int numInserted=0;
        private int numUpdated=0;
        private int numErrors=0;
        private ArrayList<Integer> nousAlumnes;

        public LongTask()
        {
            nousAlumnes = new ArrayList<Integer>();
        }
        
        @Override
        public void run()
        {
             nousAlumnes.clear();
             
              inc = 100./(1.0*listModel1.size());

               for(Object ruta: listModel1.toArray())
                {
                    parseXls((String) ruta);
                }
                jProgressBar1.setValue(100);

        }


        private void parseXls(String ruta) {

        htmlLog1.append("*Parsing XESTIB2.0 .xls file: "+ ruta, Color.BLUE, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD);
        htmlLog1.append("<hr style=\"width: 100%; height: 2px;\">");

       //Custom button text
        Object[] options = {"Cancel·la", "Reemplaça", "Afegeix"};
        String missatge = "Seleccionau com importar les dades";
        boolean result = false;
        try
        {
            WorkbookSettings ws = new WorkbookSettings();
            ws.setLocale(new Locale("ca", "ES"));
            //ws.setEncoding("UTF8");
            ws.setEncoding("ISO-8859-1");

           //jTextPane1.append(ruta);
            Workbook workbook = Workbook.getWorkbook(new File(ruta),ws);
            Sheet s  = workbook.getSheet(0);

            htmlLog1.append("Dimensions "+s.getColumns()+"; " + s.getRows()+"\n\n", Color.GRAY, HtmlLog.DEFAULTSIZE, HtmlLog.ITALIC);

            double step = inc/(1.0+s.getRows());

            for(int row=0; row<s.getRows(); row++) //
            {

              Object[] fila = new Object[s.getColumns()];

              for(int col=0; col<s.getColumns(); col++)
              {
                  Object valor = null;
                  Cell acell = s.getCell(col,row);
                  CellType type = acell.getType();
                  if(type.equals(CellType.LABEL))
                  {
                      LabelCell dc = (LabelCell) acell;
                      valor = dc.getString();

                  }
                  else if(type.equals(CellType.NUMBER))
                  {
                      NumberCell dc = (NumberCell) acell;
                      valor = (int) dc.getValue();

                  }
                  else if(type.equals(CellType.DATE))
                  {
                      DateCell dc = (DateCell) acell;
                      valor = new java.sql.Date(dc.getDate().getTime());

                  }
                  else
                  {
                      valor = "";
                  }

                  fila[col] = valor;
                  //if(col==2 && ((String) fila[col]).equals("")) break; //he comentat aquesta linia 21/07
              }

              //Condicio per saber si la fila esta en blanc o es un alumne
              //abans fila[26 i 24]
              //Miram la fila del numero d'expedient que per força no pot ser en blanc 
              //es troba en fila 8
              if((!(""+fila[8]).isEmpty()) && !(((String) fila[2]).equals("Nom"))) //Skip blank lines
              {
              if(!(((String) fila[0]).isEmpty()) ) //Llinatge1 no null
              {

                  //Cal arreglar el camp d'estudis
                  String estudis = ((String) fila[6]).toUpperCase();
                  if(estudis.contains("ESO")) {
                                estudis = estudis.substring(0,2) + " ESO";
                            }
                  else if(estudis.contains("BAT")) {
                                estudis = estudis.substring(0,2) + " BATX";
                            }

                  fila[6] = estudis;

//                  for(int t=0; t<s.getColumns(); t++)
//                          //System.out.println("fila "+t+": "+fila[t]);
                  
                    numChecked +=1;
                  
                   
                    result = exportXesAlumnes(fila);
                    if(result) {
                                exportXesPares(fila);
                            }
                    //System.out.println(currentExp+"ara ha guardat xesalumne i xespare");
              }
              else
              {
                    if(result) {
                                exportXesPares(fila);
                            }
                    //System.out.println(currentExp+"ara ha guardat nomes xespare");

              }

              status +=step;
              jProgressBar1.setValue((int) status);
            }
            }


          workbook.close();
        }
        catch (IOException e)
        {
        }
        catch (BiffException e)
        {
        }

        String anyLlarg = cfg.anyAcademicFitxes+"-"+(cfg.anyAcademicFitxes+1);
        if(jContrasenyes.isSelected())
        {
            int nup = (int) (GeneratePwds.generaContrasenyes(false,cfg.getCoreCfg().getMysql())/2.);
            htmlLog1.append(">>> Contrasenyes generades ["+nup+"] ", Color.darkGray, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
        }
        if(jGenFitxes.isSelected())
        {
            int nup = (int) (CreaFitxes.generaFitxes(anyLlarg, nousAlumnes, cfg));
            htmlLog1.append(">>> Fitxes generades ["+nup+"] ", Color.darkGray, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
        }
        if(jAssigna.isSelected())
        {
                org.iesapp.framework.admin.AssignaTutors at = new org.iesapp.framework.admin.AssignaTutors(cfg.anyAcademicFitxes+"", new HtmlLog(), cfg.getCoreCfg());
            int nup = at.assignaTutors(1);
            htmlLog1.append(">>> S'han assignat tutor/a a  ["+nup+"] alumnes ", Color.darkGray, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
        }

         htmlLog1.append(">>> Num. alumnes Checked ["+numChecked+"] ", Color.darkGray, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
         htmlLog1.append(">>> Num. alumnes Inserted ["+numInserted+"] ", Color.darkGray, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
         htmlLog1.append(">>> Num. alumnes Updated ["+numUpdated+"] ", Color.darkGray, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
         htmlLog1.append(">>> Num. Errors ["+numErrors+"] ", Color.RED, HtmlLog.DEFAULTSIZE, HtmlLog.BOLD );
         htmlLog1.append(">>> Done! ", Color.BLUE, HtmlLog.DEFAULTSIZE, HtmlLog.DEFAULTSTYLE );
        
    }

     private boolean exportXesAlumnes(Object[] fila) {
            currentExp = ((Number) fila[8]).intValue();
            String any = fila[4].toString();            //Any en el document EXCEL
            String currentName = fila[0]+ " "+ fila[1] +","+ fila[2];
              
            //Comprova si l'alumne ja existeix en el curs actual
            boolean existsXesAlumneHistoric1 = existsXesAlumneHistoric(currentExp, any, cfg);
            if(existsXesAlumneHistoric1 && !jUpdate.isSelected()) {
               // htmlLog1.append(" - Alumne "+currentExp+" ja existeix al curs "+any);
                return false;
            }  
            
            //Comprova si l'alumne existeix en la xes_alumne
            boolean existsXesAlumne1 = existsXesAlumne(currentExp, cfg);
            String mode;
            String SQL2;
            Object[] values;
            
            if (!existsXesAlumne1)
            {
                    mode = "INSERT";
                    SQL2 = "INSERT INTO `"+CoreCfg.core_mysqlDBPrefix+"`.xes_alumne (Llinatge1, Llinatge2, Nom1, Centre, "+
                        "Exp2, NumRep, Sexe, Edat, DataNaixement, Nacionalitat, PaisNaixement, ProvinciaNaixement,"+
                        "LocalitatNaixement, DNI, TargetaSanitaria, Adreca, Municipi, Localitat, CP) "+
                        " VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        values = new Object[]{fila[0], fila[1], fila[2], fila[3], 
                                               fila[8], fila[9], fila[10], fila[11], fila[12], fila[13], fila[14], fila[15],
                                               fila[16], fila[17], fila[18], fila[19], fila[20], fila[21], fila[22]};
                       
                       numInserted += 1;
                 }
                 else
                 {
                    mode = "UPDATE";
                    SQL2 = "UPDATE `"+CoreCfg.core_mysqlDBPrefix+"`.xes_alumne SET Llinatge1=?, Llinatge2=?, Nom1=?, Centre=?, "+
                        "NumRep=?, Sexe=?, Edat=?, DataNaixement=?, Nacionalitat=?, PaisNaixement=?, ProvinciaNaixement=?,"+
                        "LocalitatNaixement=?, DNI=?, TargetaSanitaria=?, Adreca=?, Municipi=?, Localitat=?, CP=? "
                        + " WHERE Exp2=?";
                      values = new Object[]{fila[0], fila[1], fila[2], fila[3],
                                               fila[9], fila[10], fila[11], fila[12], fila[13], fila[14], fila[15],
                                               fila[16], fila[17], fila[18], fila[19], fila[20], fila[21], fila[22],
                                            fila[8]};
                     
                      if(jUpdate.isSelected()) {
                    numUpdated += 1;
                }
                 }
           
              boolean result =  mode.equals("UPDATE") || mode.equals("INSERT");
                
              if(result)
                {
                    int nup =  cfg.getCoreCfg().getMysql().preparedUpdate(SQL2, values);
                     
                    if(nup>0){
                           htmlLog1.append("["+currentExp+ "] "+currentName+" : xes_alumne, "+mode+" [OK] \n");
                    }
                    else{
                           htmlLog1.append("["+currentExp+"] "+currentName+" : xes_alumne, "+mode+" [FAILED] \n", Color.RED, HtmlLog.DEFAULTSIZE, HtmlLog.DEFAULTSTYLE );
                           numErrors += 1;
                    }
                }
                
                   //Si no existeix l'alta l'hem de crear
                    boolean already = existsXesAlta(currentExp, new java.util.Date(), cfg);
                    String SQL3;
                    
                    if(!already)
                    {
                        SQL3 = "INSERT INTO `"+CoreCfg.core_mysqlDBPrefix+"`.xes_alta (Exp2, dataAlta) VALUES('" + fila[8] + "', CURRENT_DATE() )";
                        int nup3 =  cfg.getCoreCfg().getMysql().executeUpdate(SQL3);
                        if(nup3>0){
                           htmlLog1.append("["+currentExp+ "] "+currentName+" : xes_alta, "+mode+" [OK] \n");
                        }
                        else
                        {
                           htmlLog1.append("["+currentExp+"] "+currentName+" : xes_alta, "+mode+" [FAILED] \n", Color.RED, HtmlLog.DEFAULTSIZE, HtmlLog.DEFAULTSTYLE );
                           numErrors += 1;
                        }
                    }
               
             

///////////////////// HISTORIC
             
              
                SQL2 = "";
            
                 if (!existsXesAlumneHistoric1)
                 {
                    SQL2 = "INSERT INTO `"+CoreCfg.core_mysqlDBPrefix+"`.xes_alumne_historic (Exp2, AnyAcademic, Ensenyament, Estudis, Grup, ProfTutor)"
                        + " VALUES(?,?,?,?,?,?)";
                    mode = "INSERTED";
                    values = new Object[]{fila[8], fila[4], fila[5], fila[6], fila[7], ""};
                    //Falta el professor tutor que l'haurè de obtenir de l'sgd
                 }
                 else
                 {
                   if(jUpdate.isSelected()) {
                    SQL2 = "UPDATE `"+CoreCfg.core_mysqlDBPrefix+"`.xes_alumne_historic SET Ensenyament=?, Estudis=?, Grup=? WHERE Exp2=? AND AnyAcademic=? ";
                }
                        mode = "UPDATED";
                    values = new Object[]{fila[5], fila[6], fila[7],fila[8], fila[4]};
                 }
                
              if(!SQL2.isEmpty())
              {
                 //Cal importar-ho des de sgd o xestib
                 int nup = cfg.getCoreCfg().getMysql().preparedUpdate(SQL2, values);
                 if(nup>0) {
                    htmlLog1.append("["+currentExp+"] xes_alumne_historic "+mode);
                }
              }

            //Esborra el que hi pugui haver en XesPares sobre aquest alumne
            //Per asseguar esborra el contingut que hi pugui haver-hi d'aquest alumne
             if(result)
             {
                String SQL1 = "DELETE FROM `"+CoreCfg.core_mysqlDBPrefix+"`.xes_dades_pares where Exp2="+currentExp;
                int nup =  cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
             }

             nousAlumnes.add(currentExp);
             return result;

    }

    private void exportXesPares(Object[] fila) {
 

          
            String SQL2 = "INSERT INTO `"+CoreCfg.core_mysqlDBPrefix+"`.xes_dades_pares (Exp2, Telefon, Email, Relatiu1, Tutor, Relatiu2, TelefonTutor, Relatiu3, EmailTutor, Edat, Professio) "+
                        " VALUES(?,?,?,?,?,?,?,?,?,?,?)";
            Object[] values = new Object[]{currentExp, fila[24], fila[25], fila[26], fila[27], fila[28], fila[29], fila[30], fila[31], 0,""};
            int nup =  cfg.getCoreCfg().getMysql().preparedUpdate(SQL2, values);

            if(nup>0)
            {
                   htmlLog1.append("["+currentExp+ "] : xes_dades_pares, INSERT [OK] \n");
            }
            else
            {
                   htmlLog1.append("["+currentExp+"] : xes_dades_pares, INSERT [FAILED] \n" , Color.RED, HtmlLog.DEFAULTSIZE, HtmlLog.DEFAULTSTYLE );
                   numErrors += 1;
            }


    }



    }

  
   @Override
    protected JRootPane createRootPane() {
    JRootPane rootPane2 = new JRootPane();
    KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
    Action actionListener = new AbstractAction() {
      public void actionPerformed(ActionEvent actionEvent) {
        setVisible(false);
      }
    } ;
    InputMap inputMap = rootPane2.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
    inputMap.put(stroke, "ESCAPE");
    rootPane2.getActionMap().put("ESCAPE", actionListener);

    return rootPane2;
  }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.iesapp.framework.util.HtmlLog htmlLog1;
    private javax.swing.JCheckBox jAssigna;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jContrasenyes;
    private javax.swing.JCheckBox jGenFitxes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.l2fprod.common.swing.JTaskPaneGroup jTaskPaneGroup1;
    private javax.swing.JCheckBox jUpdate;
    // End of variables declaration//GEN-END:variables

    public static boolean existsXesAlumne(int expd, final Cfg cfg)
    {
        boolean exists = false;
        String SQL1 = "SELECT * FROM `"
                + CoreCfg.core_mysqlDBPrefix + "`.xes_alumne WHERE Exp2='" + expd + "'";
               
        
         try {        
             Statement st = cfg.getCoreCfg().getMysql().createStatement();
             ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
              
            if (rs1 != null && rs1.next()) {
                
                exists = true;
                rs1.close();
                st.close();        
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportarAlumnes.class.getName()).log(Level.SEVERE, null, ex);
        }
  
         return exists;     
    }
    
    public static boolean existsXesAlumneHistoric(int expd, String year, final Cfg cfg)
    {
        boolean exists = false;
        String SQL1 = "SELECT * FROM `"
                + CoreCfg.core_mysqlDBPrefix + "`.xes_alumne_historic WHERE Exp2='" + expd + "'"
                + " AND anyAcademic='" + year + "'";
        
         try {        
            Statement st = cfg.getCoreCfg().getMysql().createStatement();
            ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
              
            if (rs1 != null && rs1.next()) {
                
                exists = true;
                rs1.close();
                        
            }
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(ImportarAlumnes.class.getName()).log(Level.SEVERE, null, ex);
        }
  
         return exists;   
     }
    

    public static boolean existsXesAlta(int expd, java.util.Date today, final Cfg cfg)
    {
        boolean exists = false;
        String SQL1 = "SELECT * FROM `"
                + CoreCfg.core_mysqlDBPrefix + "`.xes_alta WHERE Exp2='" + expd + "'"
                + " AND dataAlta='" + new DataCtrl(today).getDataSQL() + "'";
         try {        
             Statement st = cfg.getCoreCfg().getMysql().createStatement();
             ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
              
            if (rs1 != null && rs1.next()) {
                
                exists = true;
                rs1.close();
                st.close();      
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportarAlumnes.class.getName()).log(Level.SEVERE, null, ex);
        }
  
         return exists;   
     }

    
      
}